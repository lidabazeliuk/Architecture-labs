1. Патерни GoF. Одинак.

Патерн проектування - це поширене вирішення певної проблеми при проектуванні архітектури програм.
Патерни GoF:
1. Породжуючі(6)
2. Структурні(7)
3. Поведінкові(11)

Зміст паттерну
Одинак ​​— це породжуючий патерн проектування, який гарантує, що клас має лише один екземпляр, і надає до нього глобальну точку доступу.

Одинак ​​вирішує відразу дві проблеми, порушуючи принцип єдиної відповідальності класу:
1. Гарантує наявність єдиного екземпляра класу. Найчастіше це корисно для доступу до якогось спільного ресурсу, наприклад, бази даних.
2.Надає глобальну точку доступу. Глобальні змінні не захищені від запису, тому будь-який код може змінювати значення без вашого відома.
Але є й інший нюанс. Добре би було зберігати в одному місці і код, який вирішує проблему №1, а також мати до нього простий і доступний інтерфейс.

Рішення:
Всі реалізації Одинака зводяться до того, щоб приховати конструктор за умовчанням і створити публічний статичний метод, який контролюватиме життєвий цикл об'єкта-одинака.
Якщо у вас є доступ до класу одинака, то буде доступ і до цього статичного методу. З якої точки коду ви б його не викликали, він завжди віддаватиме один і той самий об'єкт.

Структура:
Одинак ​​визначає статичний метод getInstance, який повертає єдиний екземпляр свого класу.
Конструктор одинаки має бути прихований від клієнтів. Виклик методу getInstance має стати єдиним способом отримати об'єкт цього класу

Застосовується:
-Коли в програмі має бути єдиний екземпляр якогось класу, доступний всім клієнтам (наприклад, загальний доступом до базі даних із різних частин програми).
Одинак ​​приховує від клієнтів усі способи створення нового об'єкта, крім спеціального методу. Цей метод або створює об'єкт, або віддає існуючий об'єкт, якщо він вже був створений.

-Коли вам хочеться мати більше контролю над глобальними змінними.
 На відміну від глобальних змінних, Одинак ​​гарантує, що ніякий інший код не замінить створений екземпляр класу, тому ви завжди впевнені в наявності лише одного об'єкта-одинака.
Тим не менш, у будь-який момент ви можете розширити це обмеження і дозволити будь-яку кількість об'єктів-одинаків, змінивши код в одному місці (метод getInstance)

Кроки реалізації:
1.Додайте до класу приватне статичне поле, яке буде містити одиночний об'єкт.
2.Оголосіть статичний метод, який буде використовуватися для отримання одинаки.
3.Потрібно додати ініціалізацію (створення об'єкта при першому виклику методу) в одиночний метод, що створює.
4.Зробіть конструктор класу приватним.
5.У клієнтському коді замініть виклики конструктора один на один викликами його методу, що створює.

Переваги:
-Гарантує наявність єдиного екземпляра класу.
-Надає глобальну точку доступу.
-Реалізує відкладену ініціалізацію об'єкта-одинака.

Недоліки:
-Порушує принцип Single responsibility
-Проблеми з багатопочністю